#### Options ####

# Don't echo build commands unless VERBOSE is set
VERBOSE ?= 0
ifeq ($(VERBOSE),0)
  QUIET := @
endif


#### Tools ####

CC1      := tools/agbcc/bin/agbcc
CC1_OLD  := tools/agbcc/bin/old_agbcc
CPP      := $(DEVKITARM)/bin/arm-none-eabi-cpp
AS       := $(DEVKITARM)/bin/arm-none-eabi-as
LD       := $(DEVKITARM)/bin/arm-none-eabi-ld
OBJCOPY  := $(DEVKITARM)/bin/arm-none-eabi-objcopy

GBAGFX   := tools/gbagfx/gbagfx
GBACOMP  := tools/gbacomp/gbacomp
AIF2PCM  := tools/aif2pcm/aif2pcm

CC1FLAGS := -mthumb-interwork -Wimplicit -Wparentheses -O2 -fhex-asm -fno-common
CPPFLAGS := -I tools/agbcc/include -iquote include -nostdinc -undef
ASFLAGS  := -mcpu=arm7tdmi -mthumb-interwork -I asminclude


#### Files ####

ROM      := mariovsdk.gba
ELF      := $(ROM:.gba=.elf)
MAP      := $(ROM:.gba=.map)
LDSCRIPT := ldscript.txt
CFILES   := $(wildcard src/*.c)
SFILES   := $(wildcard asm/*.s) $(wildcard data/*.s)\
            $(wildcard data/common_sprites/*.s) $(wildcard data/particle_sprites/*.s)\
			$(wildcard data/world_one_sprites/*.s) $(wildcard data/world_two_sprites/*.s)\
			$(wildcard data/world_three_sprites/*.s) $(wildcard data/world_four_sprites/*.s)\
			$(wildcard data/world_five_sprites/*.s) $(wildcard data/world_six_sprites/*.s)\
			$(wildcard data/main_boss_sprites/*.s) $(wildcard data/plus_boss_sprites/*.s)
OFILES   := $(SFILES:.s=.o) $(CFILES:.c=.o)
DEP_FILES := $(CFILES:.c=.dep)

src/agb_flash.o: CC1FLAGS := -O1 -mthumb-interwork
src/agb_flash_1m.o: CC1FLAGS := -O1 -mthumb-interwork
src/agb_flash_mx.o: CC1FLAGS := -O1 -mthumb-interwork

src/libc.o: CC1 := $(CC1_OLD)
src/libc.o: CC1FLAGS := -O2

assets/unused/EarlyOptionsMenuBG.gbapal: GBAGFX_FLAGS := -msbhack

# Some tutorial levels need the other LZ compression algorithm
assets/level/level_data/world_one/1_1_tutorial.bin.lz:   LZ_VERSION := 1
assets/level/level_data/world_five/4_3_tutorial.bin.lz:  LZ_VERSION := 1
assets/level/level_data/world_five/4_5_tutorial.bin.lz:  LZ_VERSION := 1
assets/level/level_data/world_five/4_6_tutorial.bin.lz:  LZ_VERSION := 1
assets/level/level_data/world_five/4_mm_tutorial.bin.lz: LZ_VERSION := 1
assets/level/level_data/world_five/5_2_tutorial.bin.lz:  LZ_VERSION := 1
assets/level/level_data/world_five/5_4_tutorial.bin.lz:  LZ_VERSION := 1
assets/level/level_data/world_five/5_5_tutorial.bin.lz:  LZ_VERSION := 1
assets/level/level_data/world_five/5_6_tutorial.bin.lz:  LZ_VERSION := 1
assets/level/level_data/world_five/5_mm_tutorial.bin.lz: LZ_VERSION := 1
assets/level/level_data/world_five/6_2_tutorial.bin.lz:  LZ_VERSION := 1
assets/level/level_data/world_five/6_3_tutorial.bin.lz:  LZ_VERSION := 1
assets/level/level_data/world_five/6_5_tutorial.bin.lz:  LZ_VERSION := 1
assets/level/level_data/world_five/6_6_tutorial.bin.lz:  LZ_VERSION := 1

#### Main Targets ####

compare: $(ROM)
	$(QUIET) md5sum -c checksum.md5

clean:
	$(RM) $(ROM) $(ELF) $(MAP) $(OFILES) src/*.s
	find . -name '*.4bpp' -exec rm {} +
	find . -name '*.8bpp' -exec rm {} +
	find . -name '*.gbapal' -exec rm {} +
	find . -name '*.lz' -exec rm {} +
	find . -name '*.rle' -exec rm {} +
	$(RM) assets/sounds/*.pcm
	$(MAKE) -C tools/gbagfx clean

# Compile a set of baserom objects for use with objdiff
baserom-objs: compare
	mkdir -p baserom-objs && rm -f baserom-objs/*
	cp src/*.o baserom-objs
	cp asm/*.o baserom-objs

#### Recipes ####

$(ELF): $(OFILES) $(LDSCRIPT)
	@echo 'Linking $@'
	$(QUIET) $(LD) -T $(LDSCRIPT) -Map $(MAP) $(OFILES) tools/agbcc/lib/libgcc.a -o $@

%.gba: %.elf
	@echo 'Generating ROM $@'
	$(QUIET) $(OBJCOPY) -O binary --pad-to 0x9000000 $< $@

%.o: %.c
	@echo 'Compiling $<'
	$(QUIET) $(CPP) $(CPPFLAGS) -MMD -MF $(@:.o=.dep) -MT $@ $< | $(CC1) $(CC1FLAGS) -o $*.s
	$(QUIET) $(AS) $(ASFLAGS) $*.s -o $*.o

%.o: %.s
	@echo 'Assembling $<'
	$(QUIET) $(AS) $(ASFLAGS) $< -o $@

ldscript.txt: ldscript.in
	@echo '/* Autogenerated - do not edit. Edit $< instead. */' > $@
	$(CPP) -P $< >> $@

%.4bpp:   %.png $(GBAGFX) ; $(GBAGFX) $< $@ $(GBAGFX_FLAGS)
%.8bpp:   %.png $(GBAGFX) ; $(GBAGFX) $< $@ $(GBAGFX_FLAGS)
%.gbapal: %.pal $(GBAGFX) ; $(GBAGFX) $< $@ $(GBAGFX_FLAGS)

%.pcm:    %.aif $(AIF2PCM) ; $(AIF2PCM) $< $@

LZ_VERSION := 2

%.lz:     %     $(GBACOMP) ; $(GBACOMP) -l -v $(LZ_VERSION) $< $@
%.rle:    %     $(GBACOMP) ; $(GBACOMP) -r $< $@

$(GBAGFX):  ; $(MAKE) -C $(@D)
$(GBACOMP): ; $(MAKE) -C $(@D)
$(AIF2PCM): ; $(MAKE) -C $(@D)

# Automatic dependency generation
-include $(DEP_FILES)

# Automatically scan files for incbins and add them as a dependency
.SECONDEXPANSION:
$(SFILES:.s=.o): $$(shell sed -n '/INCBIN/s/.*"\([^"]*\)".*/\1/p' $$< | sort -u)
